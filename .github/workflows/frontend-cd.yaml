name: Frontend Continuous Deployment

on:
  push:
    branches:
      - main
    paths:
      - 'starter/frontend/**' # Only trigger if files in the frontend directory change
  workflow_dispatch: # Allows manual triggering of the workflow

env:
  REACT_APP_MOVIE_API_URL: ""
  AWS_REGION: us-east-1

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: starter/frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('starter/frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: cd starter/frontend && npm ci

      - name: Run lint
        run: cd starter/frontend && npm run lint

  test:
    runs-on: ubuntu-latest
    needs: lint # This job will only run if the 'lint' job succeeds
    steps:
      - name: Checkout code
        uses: actions/checkout@4

      - name: Set up Node.js
        uses: actions/setup-node@4
        with:
          node-version: "18"

      - name: Cache node modules
        uses: actions/cache@4
        with:
          path: starter/frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('starter/frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies (test)
        run: cd starter/frontend && npm ci

      - name: Run tests
        run: cd starter/frontend && npm test

  build_and_push_to_ECR:
    runs-on: ubuntu-latest
    needs: test # This job will only run if the 'test' job succeeds (and transitively, if 'lint' succeeds)

    env:
      ECR_REPOSITORY: frontend
      AWS_REGION: us-east-1
      K8S_BASE_PATH: k8s

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: GET backend service URL
        id: get-backend-url
        run: |
          BACKEND_HOSTNAME= $(KUBECTL GET SVC BACKEND -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'
          echo "backend_url=${BACKEND_HOSTNAME}" >> $GITHUB_OUTPUT
          echo "REACT_APP_MOVIE_API_URL=http://${BACKEND_HOSTNAME}" >> $GITHUB_ENV

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v4
        with:
          mask-password: true


      - name: Build and tag image to Amazon ECR
        id: build-image
        working-directory: starter/frontend
        env:
          ECR_REGISTERY: ${{ steps.login-ecr.output.registery }}
          ECR_REPOSITORY: frontend
          IMAGE_TAG: ${{ github.sha }}

        run: |
          IMAGE_TAG=$(echo $GITHUB_SHA | cut -c 1-7)
          ECR_REGISTRY="${{ steps.login-ecr.outputs.registry }}"

      - name: Push Docker imageC
        run: |
          docker push $ECR_REGISTRY/$ECRREPOSITORY:$IMAGE_TAG
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_OUTPUT
          working directory: ./starter/frontend

      - name: Update Kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --REGION ${{ secrets.AWS_REGION }}

      - name: Setup Kustomize
        uses: kodermax/setup-kustomize@v1
        with:
          kustomize-version: '4.5.7'
  
  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push_to_ECR
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Kubernetes using Kustomize
        env:
          ECR_REPOSITORY: frontend
          IMAGE_TAG: ${{ github.sha }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

        run: |
          cd starter/frontend/k8s      
          cd ${{ env.K8S_BASE_PATH }}

          kustomize edit set image frontend=$ECR_REGISTRY/ECR_REPOSITORY :$IMAGE_TAG

          # Apply the Kubernetes manifests
          kustomize build | kubectl apply -f -