name: Frontend Continuous Deployment

on:
  push:
    branches:
      - main
    paths:
      - './starter/frontend/**'
  workflow_dispatch:

env:
  REACT_APP_MOVIE_API_URL: ""
  AWS_REGION: us-east-1

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ./starter/frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('./starter/frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: cd ./starter/frontend && npm ci

      - name: Run lint
        run: cd ./starter/frontend && npm run lint

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ./starter/frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('./starter/frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies (test)
        run: cd ./starter/frontend && npm ci

      - name: Run tests
        run: cd ./starter/frontend && npm test

  build_and_push_to_ECR:
    runs-on: ubuntu-latest
    needs: [lint, test]

    env:
      ECR_REPOSITORY: frontend
      AWS_REGION: us-east-1
      K8S_BASE_PATH: k8s

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}

      - name: GET backend service URL
        id: get-backend-url
        run: |
          BACKEND_HOSTNAME=$(kubectl get svc backend -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          echo "backend_url=http://${BACKEND_HOSTNAME}" >> $GITHUB_OUTPUT
          echo "REACT_APP_MOVIE_API_URL=http://${BACKEND_HOSTNAME}" >> $GITHUB_ENV

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: true


      - name: Build and tag image to Amazon ECR
        id: build-image
        working-directory: ./starter/frontend
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: frontend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build --build-arg REACT_APP_MOVIE_API_URL=${{ env.REACT_APP_MOVIE_API_URL }} -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_OUTPUT
  
  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push_to_ECR
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: true
          
      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}

      - name: Deploy to Kubernetes using Kustomize
        env:
          ECR_REPOSITORY: frontend
          IMAGE_TAG: ${{ github.sha }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}

        run: |
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          sudo mv kustomize /usr/local/bin/
          cd ./starter/frontend/k8s      
          kustomize edit set image frontend=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          # Apply the Kubernetes manifests
          kustomize build | kubectl apply -f -