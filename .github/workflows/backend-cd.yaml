name: Backend Continuous Deployment

on:
  push:
    branches:
      - main
    paths:
      - 'starter/backend/**' # Only when code in the backend application changes
  workflow_dispatch: # Able to be run on-demand (manually)

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies (lint)
        working-directory: starter/backend
        run: |
          python -m pip install --upgrade pip
          pip install flake8

      - name: Run lint
        working-directory: starter/backend
        run: flake8 .

  test:
    runs-on: ubuntu-latest
    needs: lint # Runs build job only when the lint job passes
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies (test)
        working-directory: starter/backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pipenv install

      - name: Run tests
        working-directory: starter/backend
        run: pipenv run test


      build_and_push_to_ecr: # Runs a build job only when the lint and test jobs pass
       runs-on: ubuntu-latest
       needs: test

      env:
        ECR_REPOSITORY: backend
        AWS_REGION: us-east-1

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4 # Uses aws-actions/configure-aws-credentials
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} # Accessing Github Secrets for credentials
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: true

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        working-directory: starter/backend
        run: |
          IMAGE_TAG=$(echo ${{ github.sha }} | cut -c 1-7)
          ECR_REGISTRY_URI="${{ steps.login-ecr.outputs.registry }}"

          docker build \
            -t ${ECR_REGISTRY_URI}/${{ env.ECR_REPOSITORY }}:${IMAGE_TAG} \
            .

          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_OUTPUT

      - name: Push Docker image to ECR
        run: |
          ECR_REGISTRY_URI="${{ steps.login-ecr.outputs.registry }}"
          docker push ${ECR_REGISTRY_URI}/${{ env.ECR_REPOSITORY }}:${{ steps.build-image.outputs.IMAGE_TAG }}


  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push_to_ecr # This job runs only when the build and push job succeeds

    env:
      ECR_REPOSITORY: backend
      AWS_REGION: us-east-1

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Update Kubeconfig for EKS
        run: |
        aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

     - name: Install Kustomize
        run: |
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          sudo mv kustomize /usr/local/bin/   

        run: | 
          cd ./starter/backend/k8s
          kustomize edit set image backend=$ECR_REGISTRY/ECR_REPOSITORY :$IMAGE_TAG
          kustomize build | kubectl apply -f -
      
